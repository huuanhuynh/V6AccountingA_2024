@using V6Soft.Common.Utils.StringExtensions;
@using V6Soft.Web.Common.HtmlExtensions;
@using V6Soft.Web.Accounting.HtmlExtensions;

@using HtmlElemNames = V6Soft.Web.Common.Constants.Names.HtmlElements;
@using FieldIndex = V6Soft.Models.Core.Constants.DefinitionIndex.Field;

@model V6Soft.Web.Common.Models.DynamicFormViewModel

@{
    ViewBag.Title = "Customer Groups";
    int i = 0;
}

<section ng-controller="dynFormCtrl">
    @Html.BuildSettingsElement(Model.Settings)

    <button class="btn btn-primary" ng-disabled="frmEdit.$invalid" 
            ng-click="submitForm(frmEdit.$valid)">
        Save
    </button>
    <hr />


    <form role="tabpanel" class="form-horizontal" id="frmEdit" name="frmEdit"
          novalidate>

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            @foreach (var group in Model.Groups)
            {
                <li role="presentation" class="@(i++ == 0? "active": string.Empty)">
                    <a href="#@group.Replace(" ", string.Empty)" aria-controls="profile" role="tab" data-toggle="tab">@group</a>
                </li>
            }
        </ul>

        <!-- Tab panes -->
        <section class="tab-content">
            @{
                i = 0;
                MvcHtmlString elementHtml;
                string fieldId, fieldName;
                bool shouldShow;
            }
            @foreach (var group in Model.Groups)
            {
                <div role="tabpanel" class="tab-pane @(i == 0 ? "active" : "")" id="@group.Replace(" ", string.Empty)">
                    @foreach (var field in Model.Fields)
                    {
                        if (field.Group == group)
                        {
                            @*Html.Raw(Html.BuildDynamicFieldElement(field));*@
                            fieldId = "frmEdit:" + field.Name;
                            fieldName = field.Name.ToLower();
                            shouldShow = !string.IsNullOrEmpty(field.Label);

                            if (!shouldShow)
                            {
                                elementHtml = Html.BuildHtmlElement("input", field,
                                    new { id = fieldId, type = "hidden" }
                                );
                                @Html.Raw(elementHtml)
                                @* Expected HTML
                                    <input type="hidden" name="fieldName" id="frmEdit:fieldName" />
                                *@
                            }
                            else
                            {
                                <div class="form-group" ng-class="{ 'has-error' : frmEdit.@fieldName.$invalid && !frmEdit.@fieldName.$pristine }">
                                    <label for="@fieldId" class="col-sm-2 control-label @(field.IsRequired ? "control-label--required" : string.Empty)">
                                        @field.Label
                                    </label>
                                    <div class="col-sm-5">
                                        @switch (field.HtmlElement)
                                        {
                                            case HtmlElemNames.Checkbox:
                                                elementHtml = Html.BuildHtmlElement("input", field,
                                                    new { id = fieldId, type = "checkbox" },
                                                    "<div class=\"checkbox\">",
                                                    "</div>"
                                                );
                                                @* Expected HTML
                                                    <div class="checkbox">
                                                        <input type="checkbox" id="" name="" ng-*="..">
                                                    </div>
                                                *@
                                                break;
                                            case HtmlElemNames.LongText:
                                                elementHtml = Html.BuildHtmlElement("textarea", field,
                                                    new { id = fieldId, @class = "form-control" }
                                                );
                                                @* Expected HTML
                                                    <textarea class="form-control" id="" ng-*=".."></textarea>
                                                *@
                                                break;
                                            default:
                                                elementHtml = Html.BuildHtmlElement("input", field,
                                                    new { id = fieldId, @class = "form-control", type = "text" }
                                                );
                                                @* Expected HTML
                                                    <input type="text" class="form-control" id="" ng-*="..">
                                                *@
                                                break;
                                        }
                                        @Html.Raw(elementHtml)
                                        <p ng-show="frmEdit.@fieldName.$error.maxlength" ng-cloak class="help-block">@field.Label is too long.</p>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
                    i++;
            }
        </section>

    </form>

    <hr />
    <button class="btn btn-primary" ng-disabled="frmEdit.$invalid"
            ng-click="submitForm(frmEdit.$valid)">
        Save
    </button>
</section>