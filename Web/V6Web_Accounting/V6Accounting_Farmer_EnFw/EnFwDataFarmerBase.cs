
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Linq;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;

using V6Soft.Accounting.Common.Farmers;
using V6Soft.Accounting.Farmers.EnFw.Entities;
using V6Soft.Common.Utils;
using V6Soft.Common.Utils.Linq;
using V6Soft.Models.Core;
using V6Soft.Models.Core.ViewModels;

using EntityState = System.Data.Entity.EntityState;

namespace V6Soft.Accounting.Farmers.EnFw
{
    /// <summary>
    ///     Base class for DataFarmer layer which utilizing EntityFramework.
    /// </summary>
    /// <typeparam name="TEntity">Type of database model generated by EF.</typeparam>
    /// <typeparam name="TV6Model">Type of application model.</typeparam>
    public abstract class EnFwDataFarmerBase<TEntity, TV6Model> : IDataFarmerBase<TV6Model> 
        where TEntity : class
        where TV6Model : V6Model
    {
        protected static SequentialGuid s_UID = new SequentialGuid();

        protected readonly IV6AccountingContext m_DbContext;
        protected readonly IDbSet<TEntity> m_Dbset;
        
        protected Guid NextUID
        {
            get
            {
                s_UID++;
                return s_UID.Value;
            }
        }

        /// <summary>
        ///     Initializes a new instance of EnFwDataFarmerBase
        /// </summary>
        /// <param name="context">EntityFramework V6Accounting object</param>
        protected EnFwDataFarmerBase(IV6AccountingContext context)
        {
            m_DbContext = context;
            m_Dbset = context.Set<TEntity>();
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.GetAll()"/>
        /// </summary>
        public virtual IList<TV6Model> GetAll()
        {
            PagedSearchResult<TV6Model> allRecords = FindByCriteria(new SearchCriteria());
            return allRecords.Data;
        }

        //public IQueryable<TV6Model> FindBy(Func<TV6Model, bool> predicate)
        //{
        //    Expression<Func<TV6Model, TEntity>> convert = TV6Model => new TEntity { Value = TV6Model.Value };
        //    var translatedPredicate = x => originalPredicate(OtherTypeFromSomeType(x))
        //    return m_Dbset.Where(predicate).AsQueryable();
        //}

        //public IQueryable<TV6Model> FindByExp(Expression<Func<TV6Model, bool>> predicate)
        //{
        //    //return m_Dbset.Where(predicate).AsQueryable();
        //    // (d => d.CustId = 2)
        //    // (d => d.ma_kh = 2)
        //}

        //public IQueryable<TV6Model> FindBy(Func<TV6Model, bool> predicate, string lazyIncludeString)
        //{
        //    //return m_Dbset.Include(lazyIncludeString).Where(predicate).AsQueryable();
        //}

        /// <summary>
        ///     See <see cref="IDataFarmerBase{TV6Model}.FindByCriteria"/>
        /// </summary>
        public PagedSearchResult<TV6Model> FindByCriteria(SearchCriteria criteria)
        {
            IList<TV6Model> searchResults;
            int total = 0;

            if (null != criteria)
            {
                IQueryable<TEntity> query = m_Dbset.AsQueryable();
                // Build WHERE conditions
                if (criteria.Filter != null && criteria.Filter.Filters != null && criteria.Filter.Filters.Count > 0)
                {
                    query = FilterExpressionBuilder.ApplyFiltering(query, criteria.Filter.Filters);
                }

                total = query.Count();

                // Build ORDER BY conditions
                if (criteria.Sort != null && criteria.Sort.Count > 0)
                {
                    query = SortExpressionBuilder.ApplySorting(query, criteria.Sort);
                }

                searchResults = query
                    .Skip((criteria.Page - 1) * criteria.PageSize).Take(criteria.PageSize) // Do paging
                    .AsEnumerable() // Trigger query execution
                    .Select(m => ToAppModel(m)) // Convert to app model
                    .ToList(); 
            }
            else // If there's no criteria, get all records.
            {
                searchResults = m_Dbset.Select(m => ToAppModel(m)).ToList();
                total = searchResults.Count;
            }

            return new PagedSearchResult<TV6Model>(searchResults, total);
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.Add()"/>
        /// </summary>
        public virtual TV6Model Add(TV6Model newModel)
        {
            // TODO: Should assign GUID for new record
            TEntity newEntity = ToEntityModel(newModel);
            TEntity result = m_Dbset.Add(newEntity);

            if (!Save()) { return null; }

            return ToAppModel(result);
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.Delete()"/>
        /// </summary>
        public virtual bool Delete(string key)
        {
            // TODO: Should use only ID or GUID to search and delete.
            var delEntity = m_Dbset.Find(key);
            m_Dbset.Remove(delEntity);
            return Save();
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.Edit()"/>
        /// </summary>
        public virtual bool Edit(TV6Model editedModel)
        {
            TEntity delEntity = ToEntityModel(editedModel);
            m_DbContext.Entry(delEntity).State = EntityState.Modified;
            return Save();
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.Save()"/>
        /// </summary>
        public virtual bool Save()
        {
            try
            {
                int affectedRows = m_DbContext.SaveChanges();
                return (0 < affectedRows);
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
        }

        /// <summary>
        ///     See <see cref="IDataFarmerBase.CountAll()"/>
        /// </summary>
        public long CountAll()
        {
            return m_Dbset.LongCount();
        }
        
        /// <summary>
        ///     Converts from EF model to app model.
        /// </summary>
        protected abstract TV6Model ToAppModel(TEntity model);
        
        /// <summary>
        ///     Converts from app model to EF model.
        /// </summary>
        protected abstract TEntity ToEntityModel(TV6Model model);


        public int ExecuteStoredProcedure(string commandText, params object[] parameters)
        {
            return m_DbContext.Database.ExecuteSqlCommand(commandText, parameters);
        }

        //public DataSet ExecuteQueryReturningDataSet(string query, string connectionString = null, params object[] parameters)
        //{
        //    if (string.IsNullOrEmpty(connectionString))
        //        connectionString = m_DbContext.Database.Connection.ConnectionString;
        //    var ds = new DataSet();
        //    using (var con = new SqlConnection(connectionString))
        //    {
        //        using (var cmd = new SqlCommand(query, con))
        //        {
        //            cmd.CommandType = CommandType.Text;
        //            cmd.Parameters.AddRange(parameters.ToArray());
        //            //cmd.CommandTimeout = commandTimeout;
        //            var ad = new SqlDataAdapter(cmd);
        //            ad.Fill(ds);
        //        }
        //    }
        //    return ds;
        //}

        //public DataTable ExecuteQueryReturningDataTable(string query, string connectionString = null, params object[] parameters)
        //{
        //    if (string.IsNullOrEmpty(connectionString))
        //        connectionString = m_DbContext.Database.Connection.ConnectionString;
        //    var ds = new DataSet();
        //    using (var con = new SqlConnection(connectionString))
        //    {
        //        using (var cmd = new SqlCommand(query, con))
        //        {
        //            cmd.CommandType = CommandType.Text;
        //            cmd.Parameters.AddRange(parameters.ToArray());
        //            //cmd.CommandTimeout = commandTimeout;
        //            var ad = new SqlDataAdapter(cmd);
        //            ad.Fill(ds);
        //        }
        //    }
        //    return ds;
        //}


        public IEnumerable<TS> Execute<TS>(string commandText, params object[] parameters)
        {
            return m_DbContext.Database.SqlQuery<TS>(commandText, parameters);
        }

        public IEnumerable Execute(Type type, string commandText, params object[] parameters)
        {
            return m_DbContext.Database.SqlQuery(type, commandText, parameters);
        }

        private int m_CommandTimeOut;
        public int CommandTimeOut
        {
            get
            {
                if (m_CommandTimeOut > 0)
                    return m_CommandTimeOut;
                m_CommandTimeOut = ConfigurationManager.AppSettings["CommandTimeOut"] == null
                    ? (60*30)
                    : int.Parse(ConfigurationManager.AppSettings["CommandTimeOut"]);
                m_CommandTimeOut = m_CommandTimeOut > 0 ? m_CommandTimeOut : 300;
                return m_CommandTimeOut;
            }
            set { m_CommandTimeOut = value; }
        }


        public DataSet ExecuteSqlStoredProcedure(string sqlCommand, string connectionString, List<SqlParameter> parameters)
        {
            var ds = new DataSet();
            
            using (var con = new SqlConnection(connectionString))
            {
                using (var cmd = new SqlCommand(sqlCommand, con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddRange(parameters.ToArray());
                    //cmd.CommandTimeout = commandTimeout; 
                    var ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                }
            }
            return ds;
        }

        public DataSet ExecuteSqlQuery(string sqlCommand, string connectionString, List<SqlParameter> parameters)
        {
            var ds = new DataSet();

            using (var con = new SqlConnection(connectionString))
            {
                using (var cmd = new SqlCommand(sqlCommand, con))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddRange(parameters.ToArray());
                    //cmd.CommandTimeout = commandTimeout; 
                    var ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                }
            }
            return ds;
        }

        public virtual ObjectQuery GetObjectQuery()
        {
            ObjectContext objectContext = ((IObjectContextAdapter)m_DbContext).ObjectContext;
            ObjectSet<TEntity> objectSet = objectContext.CreateObjectSet<TEntity>("{Dbset Name}");
            return objectSet;
        }

        public virtual ObjectQuery GetObjectQuerys()
        {
            ObjectContext objectContext = ((IObjectContextAdapter) m_DbContext).ObjectContext;
            ObjectSet<TEntity> objectSet = objectContext.CreateObjectSet<TEntity>("{Dbset Name}");
            return objectSet;
        }
    }
}
