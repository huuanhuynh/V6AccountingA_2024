//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace V6ThuePostXmlApi.PublishService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PublishServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PublishService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCusOperationCompleted;
        
        private System.Threading.SendOrPostCallback setCusCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportFromXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInfomationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppClientSyncInfoSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCurrentNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncClientInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncDecisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDateTimeServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncClientInvoiceCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertForVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvoicev2OperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentForVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEmailAgainOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInvoiceWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback rolBackWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback importCertWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatusInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSerialAndPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendInvTempToTVANOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvWithTokenToolSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvWithTokenToolSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataInvHsmOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvWithPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteInvoiceByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteInvoiceByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback callWSTestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PublishService() {
            this.Url = global::V6ThuePostXmlApi.Properties.Settings.Default.V6ThuePostApi_nuocbdgservice_PublishService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public PublishService(string linkWS) {
            this.Url = linkWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ImportAndPublishInvCompletedEventHandler ImportAndPublishInvCompleted;
        
        /// <remarks/>
        public event ImportInvCompletedEventHandler ImportInvCompleted;
        
        /// <remarks/>
        public event publishInvCompletedEventHandler publishInvCompleted;
        
        /// <remarks/>
        public event UpdateCusCompletedEventHandler UpdateCusCompleted;
        
        /// <remarks/>
        public event setCusCertCompletedEventHandler setCusCertCompleted;
        
        /// <remarks/>
        public event ImportFromXmlCompletedEventHandler ImportFromXmlCompleted;
        
        /// <remarks/>
        public event syncInfomationCompletedEventHandler syncInfomationCompleted;
        
        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;
        
        /// <remarks/>
        public event resetPasswordCompletedEventHandler resetPasswordCompleted;
        
        /// <remarks/>
        public event AppClientSyncInfoSystemCompletedEventHandler AppClientSyncInfoSystemCompleted;
        
        /// <remarks/>
        public event getCurrentNoCompletedEventHandler getCurrentNoCompleted;
        
        /// <remarks/>
        public event syncClientInvCompletedEventHandler syncClientInvCompleted;
        
        /// <remarks/>
        public event updateInvoiceCompletedEventHandler updateInvoiceCompleted;
        
        /// <remarks/>
        public event syncDecisionCompletedEventHandler syncDecisionCompleted;
        
        /// <remarks/>
        public event syncPublishCompletedEventHandler syncPublishCompleted;
        
        /// <remarks/>
        public event GetPublishInvCompletedEventHandler GetPublishInvCompleted;
        
        /// <remarks/>
        public event syncInvCancelCompletedEventHandler syncInvCancelCompleted;
        
        /// <remarks/>
        public event getDateTimeServerCompletedEventHandler getDateTimeServerCompleted;
        
        /// <remarks/>
        public event syncClientInvoiceCancelCompletedEventHandler syncClientInvoiceCancelCompleted;
        
        /// <remarks/>
        public event ConvertForVerifyCompletedEventHandler ConvertForVerifyCompleted;
        
        /// <remarks/>
        public event sendEmailCompletedEventHandler sendEmailCompleted;
        
        /// <remarks/>
        public event syncCertCompletedEventHandler syncCertCompleted;
        
        /// <remarks/>
        public event syncInvoicev2CompletedEventHandler syncInvoicev2Completed;
        
        /// <remarks/>
        public event syncInvoiceCompletedEventHandler syncInvoiceCompleted;
        
        /// <remarks/>
        public event GetSingleInvoiceCompletedEventHandler GetSingleInvoiceCompleted;
        
        /// <remarks/>
        public event PaymentForVerifyCompletedEventHandler PaymentForVerifyCompleted;
        
        /// <remarks/>
        public event GetCompanyInfoCompletedEventHandler GetCompanyInfoCompleted;
        
        /// <remarks/>
        public event sendEmailAgainCompletedEventHandler sendEmailAgainCompleted;
        
        /// <remarks/>
        public event getHashInvWithTokenCompletedEventHandler getHashInvWithTokenCompleted;
        
        /// <remarks/>
        public event publishInvWithTokenCompletedEventHandler publishInvWithTokenCompleted;
        
        /// <remarks/>
        public event AdjustReplaceInvWithTokenCompletedEventHandler AdjustReplaceInvWithTokenCompleted;
        
        /// <remarks/>
        public event CancelInvoiceWithTokenCompletedEventHandler CancelInvoiceWithTokenCompleted;
        
        /// <remarks/>
        public event rolBackWithTokenCompletedEventHandler rolBackWithTokenCompleted;
        
        /// <remarks/>
        public event importCertWithTokenCompletedEventHandler importCertWithTokenCompleted;
        
        /// <remarks/>
        public event getStatusInvCompletedEventHandler getStatusInvCompleted;
        
        /// <remarks/>
        public event getHashInvCompletedEventHandler getHashInvCompleted;
        
        /// <remarks/>
        public event CheckSignInCompletedEventHandler CheckSignInCompleted;
        
        /// <remarks/>
        public event getSerialAndPatternCompletedEventHandler getSerialAndPatternCompleted;
        
        /// <remarks/>
        public event sendInvTempToTVANCompletedEventHandler sendInvTempToTVANCompleted;
        
        /// <remarks/>
        public event getHashInvWithTokenToolSignCompletedEventHandler getHashInvWithTokenToolSignCompleted;
        
        /// <remarks/>
        public event publishInvWithTokenToolSignCompletedEventHandler publishInvWithTokenToolSignCompleted;
        
        /// <remarks/>
        public event getDataInvHsmCompletedEventHandler getDataInvHsmCompleted;
        
        /// <remarks/>
        public event ImportInvWithPatternCompletedEventHandler ImportInvWithPatternCompleted;
        
        /// <remarks/>
        public event deleteInvoiceByFkeyCompletedEventHandler deleteInvoiceByFkeyCompleted;
        
        /// <remarks/>
        public event deleteInvoiceByIDCompletedEventHandler deleteInvoiceByIDCompleted;
        
        /// <remarks/>
        public event callWSTestCompletedEventHandler callWSTestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInv(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishInvAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishInvOperationCompleted == null)) {
                this.ImportAndPublishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishInvOperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvOperationCompleted(object arg) {
            if ((this.ImportAndPublishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvCompleted(this, new ImportAndPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInv(string xmlInvData, string username, string password, int convert) {
            object[] results = this.Invoke("ImportInv", new object[] {
                        xmlInvData,
                        username,
                        password,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvAsync(string xmlInvData, string username, string password, int convert) {
            this.ImportInvAsync(xmlInvData, username, password, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvAsync(string xmlInvData, string username, string password, int convert, object userState) {
            if ((this.ImportInvOperationCompleted == null)) {
                this.ImportInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvOperationCompleted);
            }
            this.InvokeAsync("ImportInv", new object[] {
                        xmlInvData,
                        username,
                        password,
                        convert}, this.ImportInvOperationCompleted, userState);
        }
        
        private void OnImportInvOperationCompleted(object arg) {
            if ((this.ImportInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvCompleted(this, new ImportInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInv(int[] invIDs, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishInv", new object[] {
                        invIDs,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvAsync(int[] invIDs, string username, string password, string pattern, string serial) {
            this.publishInvAsync(invIDs, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishInvAsync(int[] invIDs, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishInvOperationCompleted == null)) {
                this.publishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvOperationCompleted);
            }
            this.InvokeAsync("publishInv", new object[] {
                        invIDs,
                        username,
                        password,
                        pattern,
                        serial}, this.publishInvOperationCompleted, userState);
        }
        
        private void OnpublishInvOperationCompleted(object arg) {
            if ((this.publishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvCompleted(this, new publishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateCus(string XMLCusData, string username, string pass, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("UpdateCus", new object[] {
                        XMLCusData,
                        username,
                        pass,
                        convert});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCusAsync(string XMLCusData, string username, string pass, System.Nullable<int> convert) {
            this.UpdateCusAsync(XMLCusData, username, pass, convert, null);
        }
        
        /// <remarks/>
        public void UpdateCusAsync(string XMLCusData, string username, string pass, System.Nullable<int> convert, object userState) {
            if ((this.UpdateCusOperationCompleted == null)) {
                this.UpdateCusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCusOperationCompleted);
            }
            this.InvokeAsync("UpdateCus", new object[] {
                        XMLCusData,
                        username,
                        pass,
                        convert}, this.UpdateCusOperationCompleted, userState);
        }
        
        private void OnUpdateCusOperationCompleted(object arg) {
            if ((this.UpdateCusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCusCompleted(this, new UpdateCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setCusCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setCusCert(string certSerial, string certString, string cusCode, string username, string pass) {
            object[] results = this.Invoke("setCusCert", new object[] {
                        certSerial,
                        certString,
                        cusCode,
                        username,
                        pass});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setCusCertAsync(string certSerial, string certString, string cusCode, string username, string pass) {
            this.setCusCertAsync(certSerial, certString, cusCode, username, pass, null);
        }
        
        /// <remarks/>
        public void setCusCertAsync(string certSerial, string certString, string cusCode, string username, string pass, object userState) {
            if ((this.setCusCertOperationCompleted == null)) {
                this.setCusCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetCusCertOperationCompleted);
            }
            this.InvokeAsync("setCusCert", new object[] {
                        certSerial,
                        certString,
                        cusCode,
                        username,
                        pass}, this.setCusCertOperationCompleted, userState);
        }
        
        private void OnsetCusCertOperationCompleted(object arg) {
            if ((this.setCusCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCusCertCompleted(this, new setCusCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportFromXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportFromXml(string account, string pass, string userName, string password, string productXml) {
            object[] results = this.Invoke("ImportFromXml", new object[] {
                        account,
                        pass,
                        userName,
                        password,
                        productXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportFromXmlAsync(string account, string pass, string userName, string password, string productXml) {
            this.ImportFromXmlAsync(account, pass, userName, password, productXml, null);
        }
        
        /// <remarks/>
        public void ImportFromXmlAsync(string account, string pass, string userName, string password, string productXml, object userState) {
            if ((this.ImportFromXmlOperationCompleted == null)) {
                this.ImportFromXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportFromXmlOperationCompleted);
            }
            this.InvokeAsync("ImportFromXml", new object[] {
                        account,
                        pass,
                        userName,
                        password,
                        productXml}, this.ImportFromXmlOperationCompleted, userState);
        }
        
        private void OnImportFromXmlOperationCompleted(object arg) {
            if ((this.ImportFromXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportFromXmlCompleted(this, new ImportFromXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInfomation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInfomation(string Account, string ACpass, string req) {
            object[] results = this.Invoke("syncInfomation", new object[] {
                        Account,
                        ACpass,
                        req});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInfomationAsync(string Account, string ACpass, string req) {
            this.syncInfomationAsync(Account, ACpass, req, null);
        }
        
        /// <remarks/>
        public void syncInfomationAsync(string Account, string ACpass, string req, object userState) {
            if ((this.syncInfomationOperationCompleted == null)) {
                this.syncInfomationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInfomationOperationCompleted);
            }
            this.InvokeAsync("syncInfomation", new object[] {
                        Account,
                        ACpass,
                        req}, this.syncInfomationOperationCompleted, userState);
        }
        
        private void OnsyncInfomationOperationCompleted(object arg) {
            if ((this.syncInfomationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInfomationCompleted(this, new syncInfomationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignIn(string userName, string pass) {
            object[] results = this.Invoke("SignIn", new object[] {
                        userName,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignInAsync(string userName, string pass) {
            this.SignInAsync(userName, pass, null);
        }
        
        /// <remarks/>
        public void SignInAsync(string userName, string pass, object userState) {
            if ((this.SignInOperationCompleted == null)) {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[] {
                        userName,
                        pass}, this.SignInOperationCompleted, userState);
        }
        
        private void OnSignInOperationCompleted(object arg) {
            if ((this.SignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string resetPassword(string Account, string oldPass, string newPass) {
            object[] results = this.Invoke("resetPassword", new object[] {
                        Account,
                        oldPass,
                        newPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resetPasswordAsync(string Account, string oldPass, string newPass) {
            this.resetPasswordAsync(Account, oldPass, newPass, null);
        }
        
        /// <remarks/>
        public void resetPasswordAsync(string Account, string oldPass, string newPass, object userState) {
            if ((this.resetPasswordOperationCompleted == null)) {
                this.resetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetPasswordOperationCompleted);
            }
            this.InvokeAsync("resetPassword", new object[] {
                        Account,
                        oldPass,
                        newPass}, this.resetPasswordOperationCompleted, userState);
        }
        
        private void OnresetPasswordOperationCompleted(object arg) {
            if ((this.resetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetPasswordCompleted(this, new resetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppClientSyncInfoSystem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppClientSyncInfoSystem(string Account, string ACpass, string req) {
            object[] results = this.Invoke("AppClientSyncInfoSystem", new object[] {
                        Account,
                        ACpass,
                        req});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppClientSyncInfoSystemAsync(string Account, string ACpass, string req) {
            this.AppClientSyncInfoSystemAsync(Account, ACpass, req, null);
        }
        
        /// <remarks/>
        public void AppClientSyncInfoSystemAsync(string Account, string ACpass, string req, object userState) {
            if ((this.AppClientSyncInfoSystemOperationCompleted == null)) {
                this.AppClientSyncInfoSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppClientSyncInfoSystemOperationCompleted);
            }
            this.InvokeAsync("AppClientSyncInfoSystem", new object[] {
                        Account,
                        ACpass,
                        req}, this.AppClientSyncInfoSystemOperationCompleted, userState);
        }
        
        private void OnAppClientSyncInfoSystemOperationCompleted(object arg) {
            if ((this.AppClientSyncInfoSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppClientSyncInfoSystemCompleted(this, new AppClientSyncInfoSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCurrentNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCurrentNo(string account, string pass, string pattern, string serial) {
            object[] results = this.Invoke("getCurrentNo", new object[] {
                        account,
                        pass,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string account, string pass, string pattern, string serial) {
            this.getCurrentNoAsync(account, pass, pattern, serial, null);
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string account, string pass, string pattern, string serial, object userState) {
            if ((this.getCurrentNoOperationCompleted == null)) {
                this.getCurrentNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrentNoOperationCompleted);
            }
            this.InvokeAsync("getCurrentNo", new object[] {
                        account,
                        pass,
                        pattern,
                        serial}, this.getCurrentNoOperationCompleted, userState);
        }
        
        private void OngetCurrentNoOperationCompleted(object arg) {
            if ((this.getCurrentNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrentNoCompleted(this, new getCurrentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncClientInv(string username, string password, string xmlInvData, int convert) {
            object[] results = this.Invoke("syncClientInv", new object[] {
                        username,
                        password,
                        xmlInvData,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncClientInvAsync(string username, string password, string xmlInvData, int convert) {
            this.syncClientInvAsync(username, password, xmlInvData, convert, null);
        }
        
        /// <remarks/>
        public void syncClientInvAsync(string username, string password, string xmlInvData, int convert, object userState) {
            if ((this.syncClientInvOperationCompleted == null)) {
                this.syncClientInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncClientInvOperationCompleted);
            }
            this.InvokeAsync("syncClientInv", new object[] {
                        username,
                        password,
                        xmlInvData,
                        convert}, this.syncClientInvOperationCompleted, userState);
        }
        
        private void OnsyncClientInvOperationCompleted(object arg) {
            if ((this.syncClientInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncClientInvCompleted(this, new syncClientInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateInvoice(string username, string password, string xmlInvData) {
            object[] results = this.Invoke("updateInvoice", new object[] {
                        username,
                        password,
                        xmlInvData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateInvoiceAsync(string username, string password, string xmlInvData) {
            this.updateInvoiceAsync(username, password, xmlInvData, null);
        }
        
        /// <remarks/>
        public void updateInvoiceAsync(string username, string password, string xmlInvData, object userState) {
            if ((this.updateInvoiceOperationCompleted == null)) {
                this.updateInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateInvoiceOperationCompleted);
            }
            this.InvokeAsync("updateInvoice", new object[] {
                        username,
                        password,
                        xmlInvData}, this.updateInvoiceOperationCompleted, userState);
        }
        
        private void OnupdateInvoiceOperationCompleted(object arg) {
            if ((this.updateInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateInvoiceCompleted(this, new updateInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncDecision", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncDecision(string Account, string Pass, string xmlDecision) {
            object[] results = this.Invoke("syncDecision", new object[] {
                        Account,
                        Pass,
                        xmlDecision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncDecisionAsync(string Account, string Pass, string xmlDecision) {
            this.syncDecisionAsync(Account, Pass, xmlDecision, null);
        }
        
        /// <remarks/>
        public void syncDecisionAsync(string Account, string Pass, string xmlDecision, object userState) {
            if ((this.syncDecisionOperationCompleted == null)) {
                this.syncDecisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncDecisionOperationCompleted);
            }
            this.InvokeAsync("syncDecision", new object[] {
                        Account,
                        Pass,
                        xmlDecision}, this.syncDecisionOperationCompleted, userState);
        }
        
        private void OnsyncDecisionOperationCompleted(object arg) {
            if ((this.syncDecisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncDecisionCompleted(this, new syncDecisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncPublish(string Account, string Pass, string xmlPublish) {
            object[] results = this.Invoke("syncPublish", new object[] {
                        Account,
                        Pass,
                        xmlPublish});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncPublishAsync(string Account, string Pass, string xmlPublish) {
            this.syncPublishAsync(Account, Pass, xmlPublish, null);
        }
        
        /// <remarks/>
        public void syncPublishAsync(string Account, string Pass, string xmlPublish, object userState) {
            if ((this.syncPublishOperationCompleted == null)) {
                this.syncPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncPublishOperationCompleted);
            }
            this.InvokeAsync("syncPublish", new object[] {
                        Account,
                        Pass,
                        xmlPublish}, this.syncPublishOperationCompleted, userState);
        }
        
        private void OnsyncPublishOperationCompleted(object arg) {
            if ((this.syncPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncPublishCompleted(this, new syncPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPublishInv(string account, string pass, string comtaxCode) {
            object[] results = this.Invoke("GetPublishInv", new object[] {
                        account,
                        pass,
                        comtaxCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublishInvAsync(string account, string pass, string comtaxCode) {
            this.GetPublishInvAsync(account, pass, comtaxCode, null);
        }
        
        /// <remarks/>
        public void GetPublishInvAsync(string account, string pass, string comtaxCode, object userState) {
            if ((this.GetPublishInvOperationCompleted == null)) {
                this.GetPublishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishInvOperationCompleted);
            }
            this.InvokeAsync("GetPublishInv", new object[] {
                        account,
                        pass,
                        comtaxCode}, this.GetPublishInvOperationCompleted, userState);
        }
        
        private void OnGetPublishInvOperationCompleted(object arg) {
            if ((this.GetPublishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishInvCompleted(this, new GetPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvCancel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvCancel(string Account, string Pass, string xmlInvCancel) {
            object[] results = this.Invoke("syncInvCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvCancel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvCancelAsync(string Account, string Pass, string xmlInvCancel) {
            this.syncInvCancelAsync(Account, Pass, xmlInvCancel, null);
        }
        
        /// <remarks/>
        public void syncInvCancelAsync(string Account, string Pass, string xmlInvCancel, object userState) {
            if ((this.syncInvCancelOperationCompleted == null)) {
                this.syncInvCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvCancelOperationCompleted);
            }
            this.InvokeAsync("syncInvCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvCancel}, this.syncInvCancelOperationCompleted, userState);
        }
        
        private void OnsyncInvCancelOperationCompleted(object arg) {
            if ((this.syncInvCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvCancelCompleted(this, new syncInvCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDateTimeServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDateTimeServer(string Account, string Pass) {
            object[] results = this.Invoke("getDateTimeServer", new object[] {
                        Account,
                        Pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDateTimeServerAsync(string Account, string Pass) {
            this.getDateTimeServerAsync(Account, Pass, null);
        }
        
        /// <remarks/>
        public void getDateTimeServerAsync(string Account, string Pass, object userState) {
            if ((this.getDateTimeServerOperationCompleted == null)) {
                this.getDateTimeServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDateTimeServerOperationCompleted);
            }
            this.InvokeAsync("getDateTimeServer", new object[] {
                        Account,
                        Pass}, this.getDateTimeServerOperationCompleted, userState);
        }
        
        private void OngetDateTimeServerOperationCompleted(object arg) {
            if ((this.getDateTimeServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDateTimeServerCompleted(this, new getDateTimeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInvoiceCancel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncClientInvoiceCancel(string Account, string Pass, string xmlInvoiceCancel) {
            object[] results = this.Invoke("syncClientInvoiceCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvoiceCancel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncClientInvoiceCancelAsync(string Account, string Pass, string xmlInvoiceCancel) {
            this.syncClientInvoiceCancelAsync(Account, Pass, xmlInvoiceCancel, null);
        }
        
        /// <remarks/>
        public void syncClientInvoiceCancelAsync(string Account, string Pass, string xmlInvoiceCancel, object userState) {
            if ((this.syncClientInvoiceCancelOperationCompleted == null)) {
                this.syncClientInvoiceCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncClientInvoiceCancelOperationCompleted);
            }
            this.InvokeAsync("syncClientInvoiceCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvoiceCancel}, this.syncClientInvoiceCancelOperationCompleted, userState);
        }
        
        private void OnsyncClientInvoiceCancelOperationCompleted(object arg) {
            if ((this.syncClientInvoiceCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncClientInvoiceCancelCompleted(this, new syncClientInvoiceCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertForVerify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertForVerify(string Account, string Pass, int Id) {
            object[] results = this.Invoke("ConvertForVerify", new object[] {
                        Account,
                        Pass,
                        Id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertForVerifyAsync(string Account, string Pass, int Id) {
            this.ConvertForVerifyAsync(Account, Pass, Id, null);
        }
        
        /// <remarks/>
        public void ConvertForVerifyAsync(string Account, string Pass, int Id, object userState) {
            if ((this.ConvertForVerifyOperationCompleted == null)) {
                this.ConvertForVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertForVerifyOperationCompleted);
            }
            this.InvokeAsync("ConvertForVerify", new object[] {
                        Account,
                        Pass,
                        Id}, this.ConvertForVerifyOperationCompleted, userState);
        }
        
        private void OnConvertForVerifyOperationCompleted(object arg) {
            if ((this.ConvertForVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertForVerifyCompleted(this, new ConvertForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendEmail(string username) {
            object[] results = this.Invoke("sendEmail", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendEmailAsync(string username) {
            this.sendEmailAsync(username, null);
        }
        
        /// <remarks/>
        public void sendEmailAsync(string username, object userState) {
            if ((this.sendEmailOperationCompleted == null)) {
                this.sendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEmailOperationCompleted);
            }
            this.InvokeAsync("sendEmail", new object[] {
                        username}, this.sendEmailOperationCompleted, userState);
        }
        
        private void OnsendEmailOperationCompleted(object arg) {
            if ((this.sendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEmailCompleted(this, new sendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncCert(string Account, string Pass, string xmlCert) {
            object[] results = this.Invoke("syncCert", new object[] {
                        Account,
                        Pass,
                        xmlCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncCertAsync(string Account, string Pass, string xmlCert) {
            this.syncCertAsync(Account, Pass, xmlCert, null);
        }
        
        /// <remarks/>
        public void syncCertAsync(string Account, string Pass, string xmlCert, object userState) {
            if ((this.syncCertOperationCompleted == null)) {
                this.syncCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncCertOperationCompleted);
            }
            this.InvokeAsync("syncCert", new object[] {
                        Account,
                        Pass,
                        xmlCert}, this.syncCertOperationCompleted, userState);
        }
        
        private void OnsyncCertOperationCompleted(object arg) {
            if ((this.syncCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncCertCompleted(this, new syncCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoicev2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvoicev2(string username, string password, string comtaxCode, string currentYear, string lastSync) {
            object[] results = this.Invoke("syncInvoicev2", new object[] {
                        username,
                        password,
                        comtaxCode,
                        currentYear,
                        lastSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvoicev2Async(string username, string password, string comtaxCode, string currentYear, string lastSync) {
            this.syncInvoicev2Async(username, password, comtaxCode, currentYear, lastSync, null);
        }
        
        /// <remarks/>
        public void syncInvoicev2Async(string username, string password, string comtaxCode, string currentYear, string lastSync, object userState) {
            if ((this.syncInvoicev2OperationCompleted == null)) {
                this.syncInvoicev2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvoicev2OperationCompleted);
            }
            this.InvokeAsync("syncInvoicev2", new object[] {
                        username,
                        password,
                        comtaxCode,
                        currentYear,
                        lastSync}, this.syncInvoicev2OperationCompleted, userState);
        }
        
        private void OnsyncInvoicev2OperationCompleted(object arg) {
            if ((this.syncInvoicev2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvoicev2Completed(this, new syncInvoicev2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvoice(string username, string password, string comtaxCode, string lastSync) {
            object[] results = this.Invoke("syncInvoice", new object[] {
                        username,
                        password,
                        comtaxCode,
                        lastSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvoiceAsync(string username, string password, string comtaxCode, string lastSync) {
            this.syncInvoiceAsync(username, password, comtaxCode, lastSync, null);
        }
        
        /// <remarks/>
        public void syncInvoiceAsync(string username, string password, string comtaxCode, string lastSync, object userState) {
            if ((this.syncInvoiceOperationCompleted == null)) {
                this.syncInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvoiceOperationCompleted);
            }
            this.InvokeAsync("syncInvoice", new object[] {
                        username,
                        password,
                        comtaxCode,
                        lastSync}, this.syncInvoiceOperationCompleted, userState);
        }
        
        private void OnsyncInvoiceOperationCompleted(object arg) {
            if ((this.syncInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvoiceCompleted(this, new syncInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSingleInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSingleInvoice(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync) {
            object[] results = this.Invoke("GetSingleInvoice", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        isReSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleInvoiceAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync) {
            this.GetSingleInvoiceAsync(username, password, comtaxcode, pattern, serial, notax, isReSync, null);
        }
        
        /// <remarks/>
        public void GetSingleInvoiceAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync, object userState) {
            if ((this.GetSingleInvoiceOperationCompleted == null)) {
                this.GetSingleInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetSingleInvoice", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        isReSync}, this.GetSingleInvoiceOperationCompleted, userState);
        }
        
        private void OnGetSingleInvoiceOperationCompleted(object arg) {
            if ((this.GetSingleInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleInvoiceCompleted(this, new GetSingleInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentForVerify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PaymentForVerify(string Account, string Pass, int Id, int payment, string note) {
            object[] results = this.Invoke("PaymentForVerify", new object[] {
                        Account,
                        Pass,
                        Id,
                        payment,
                        note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentForVerifyAsync(string Account, string Pass, int Id, int payment, string note) {
            this.PaymentForVerifyAsync(Account, Pass, Id, payment, note, null);
        }
        
        /// <remarks/>
        public void PaymentForVerifyAsync(string Account, string Pass, int Id, int payment, string note, object userState) {
            if ((this.PaymentForVerifyOperationCompleted == null)) {
                this.PaymentForVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentForVerifyOperationCompleted);
            }
            this.InvokeAsync("PaymentForVerify", new object[] {
                        Account,
                        Pass,
                        Id,
                        payment,
                        note}, this.PaymentForVerifyOperationCompleted, userState);
        }
        
        private void OnPaymentForVerifyOperationCompleted(object arg) {
            if ((this.PaymentForVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentForVerifyCompleted(this, new PaymentForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCompanyInfo(string taxCode) {
            object[] results = this.Invoke("GetCompanyInfo", new object[] {
                        taxCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyInfoAsync(string taxCode) {
            this.GetCompanyInfoAsync(taxCode, null);
        }
        
        /// <remarks/>
        public void GetCompanyInfoAsync(string taxCode, object userState) {
            if ((this.GetCompanyInfoOperationCompleted == null)) {
                this.GetCompanyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyInfoOperationCompleted);
            }
            this.InvokeAsync("GetCompanyInfo", new object[] {
                        taxCode}, this.GetCompanyInfoOperationCompleted, userState);
        }
        
        private void OnGetCompanyInfoOperationCompleted(object arg) {
            if ((this.GetCompanyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyInfoCompleted(this, new GetCompanyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEmailAgain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendEmailAgain(string username, string pattern, string xmlInvData) {
            object[] results = this.Invoke("sendEmailAgain", new object[] {
                        username,
                        pattern,
                        xmlInvData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendEmailAgainAsync(string username, string pattern, string xmlInvData) {
            this.sendEmailAgainAsync(username, pattern, xmlInvData, null);
        }
        
        /// <remarks/>
        public void sendEmailAgainAsync(string username, string pattern, string xmlInvData, object userState) {
            if ((this.sendEmailAgainOperationCompleted == null)) {
                this.sendEmailAgainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEmailAgainOperationCompleted);
            }
            this.InvokeAsync("sendEmailAgain", new object[] {
                        username,
                        pattern,
                        xmlInvData}, this.sendEmailAgainOperationCompleted, userState);
        }
        
        private void OnsendEmailAgainOperationCompleted(object arg) {
            if ((this.sendEmailAgainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEmailAgainCompleted(this, new sendEmailAgainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("getHashInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.getHashInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void getHashInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.getHashInvWithTokenOperationCompleted == null)) {
                this.getHashInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("getHashInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.getHashInvWithTokenOperationCompleted, userState);
        }
        
        private void OngetHashInvWithTokenOperationCompleted(object arg) {
            if ((this.getHashInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvWithTokenCompleted(this, new getHashInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.publishInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishInvWithTokenOperationCompleted == null)) {
                this.publishInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("publishInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.publishInvWithTokenOperationCompleted, userState);
        }
        
        private void OnpublishInvWithTokenOperationCompleted(object arg) {
            if ((this.publishInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvWithTokenCompleted(this, new publishInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceInvWithTokenOperationCompleted == null)) {
                this.AdjustReplaceInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceInvWithTokenOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceInvWithTokenOperationCompleted(object arg) {
            if ((this.AdjustReplaceInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceInvWithTokenCompleted(this, new AdjustReplaceInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoiceWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelInvoiceWithToken(string Account, string ACpass, string xmlData, string username, string password, string pattern) {
            object[] results = this.Invoke("CancelInvoiceWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlData,
                        username,
                        password,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelInvoiceWithTokenAsync(string Account, string ACpass, string xmlData, string username, string password, string pattern) {
            this.CancelInvoiceWithTokenAsync(Account, ACpass, xmlData, username, password, pattern, null);
        }
        
        /// <remarks/>
        public void CancelInvoiceWithTokenAsync(string Account, string ACpass, string xmlData, string username, string password, string pattern, object userState) {
            if ((this.CancelInvoiceWithTokenOperationCompleted == null)) {
                this.CancelInvoiceWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInvoiceWithTokenOperationCompleted);
            }
            this.InvokeAsync("CancelInvoiceWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlData,
                        username,
                        password,
                        pattern}, this.CancelInvoiceWithTokenOperationCompleted, userState);
        }
        
        private void OnCancelInvoiceWithTokenOperationCompleted(object arg) {
            if ((this.CancelInvoiceWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInvoiceWithTokenCompleted(this, new CancelInvoiceWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rolBackWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string rolBackWithToken(string Account, string ACpass, string id, string username, string password, string pattern) {
            object[] results = this.Invoke("rolBackWithToken", new object[] {
                        Account,
                        ACpass,
                        id,
                        username,
                        password,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void rolBackWithTokenAsync(string Account, string ACpass, string id, string username, string password, string pattern) {
            this.rolBackWithTokenAsync(Account, ACpass, id, username, password, pattern, null);
        }
        
        /// <remarks/>
        public void rolBackWithTokenAsync(string Account, string ACpass, string id, string username, string password, string pattern, object userState) {
            if ((this.rolBackWithTokenOperationCompleted == null)) {
                this.rolBackWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrolBackWithTokenOperationCompleted);
            }
            this.InvokeAsync("rolBackWithToken", new object[] {
                        Account,
                        ACpass,
                        id,
                        username,
                        password,
                        pattern}, this.rolBackWithTokenOperationCompleted, userState);
        }
        
        private void OnrolBackWithTokenOperationCompleted(object arg) {
            if ((this.rolBackWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rolBackWithTokenCompleted(this, new rolBackWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importCertWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string importCertWithToken(string Account, string ACpass, string username, string password, string certStr) {
            object[] results = this.Invoke("importCertWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        certStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importCertWithTokenAsync(string Account, string ACpass, string username, string password, string certStr) {
            this.importCertWithTokenAsync(Account, ACpass, username, password, certStr, null);
        }
        
        /// <remarks/>
        public void importCertWithTokenAsync(string Account, string ACpass, string username, string password, string certStr, object userState) {
            if ((this.importCertWithTokenOperationCompleted == null)) {
                this.importCertWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportCertWithTokenOperationCompleted);
            }
            this.InvokeAsync("importCertWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        certStr}, this.importCertWithTokenOperationCompleted, userState);
        }
        
        private void OnimportCertWithTokenOperationCompleted(object arg) {
            if ((this.importCertWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importCertWithTokenCompleted(this, new importCertWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStatusInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getStatusInv(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern) {
            object[] results = this.Invoke("getStatusInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlFkeyInv,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getStatusInvAsync(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern) {
            this.getStatusInvAsync(Account, ACpass, username, password, xmlFkeyInv, pattern, null);
        }
        
        /// <remarks/>
        public void getStatusInvAsync(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern, object userState) {
            if ((this.getStatusInvOperationCompleted == null)) {
                this.getStatusInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatusInvOperationCompleted);
            }
            this.InvokeAsync("getStatusInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlFkeyInv,
                        pattern}, this.getStatusInvOperationCompleted, userState);
        }
        
        private void OngetStatusInvOperationCompleted(object arg) {
            if ((this.getStatusInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatusInvCompleted(this, new getStatusInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInv(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern) {
            object[] results = this.Invoke("getHashInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        serialCert,
                        xmlFkeyInv,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvAsync(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern) {
            this.getHashInvAsync(Account, ACpass, username, password, serialCert, xmlFkeyInv, pattern, null);
        }
        
        /// <remarks/>
        public void getHashInvAsync(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern, object userState) {
            if ((this.getHashInvOperationCompleted == null)) {
                this.getHashInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvOperationCompleted);
            }
            this.InvokeAsync("getHashInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        serialCert,
                        xmlFkeyInv,
                        pattern}, this.getHashInvOperationCompleted, userState);
        }
        
        private void OngetHashInvOperationCompleted(object arg) {
            if ((this.getHashInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvCompleted(this, new getHashInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSignIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckSignIn(string userName, string pass) {
            object[] results = this.Invoke("CheckSignIn", new object[] {
                        userName,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSignInAsync(string userName, string pass) {
            this.CheckSignInAsync(userName, pass, null);
        }
        
        /// <remarks/>
        public void CheckSignInAsync(string userName, string pass, object userState) {
            if ((this.CheckSignInOperationCompleted == null)) {
                this.CheckSignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSignInOperationCompleted);
            }
            this.InvokeAsync("CheckSignIn", new object[] {
                        userName,
                        pass}, this.CheckSignInOperationCompleted, userState);
        }
        
        private void OnCheckSignInOperationCompleted(object arg) {
            if ((this.CheckSignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSignInCompleted(this, new CheckSignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSerialAndPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSerialAndPattern(string userName, string userPass) {
            object[] results = this.Invoke("getSerialAndPattern", new object[] {
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSerialAndPatternAsync(string userName, string userPass) {
            this.getSerialAndPatternAsync(userName, userPass, null);
        }
        
        /// <remarks/>
        public void getSerialAndPatternAsync(string userName, string userPass, object userState) {
            if ((this.getSerialAndPatternOperationCompleted == null)) {
                this.getSerialAndPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSerialAndPatternOperationCompleted);
            }
            this.InvokeAsync("getSerialAndPattern", new object[] {
                        userName,
                        userPass}, this.getSerialAndPatternOperationCompleted, userState);
        }
        
        private void OngetSerialAndPatternOperationCompleted(object arg) {
            if ((this.getSerialAndPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSerialAndPatternCompleted(this, new getSerialAndPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendInvTempToTVAN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendInvTempToTVAN(string username, string password, string pattern, string XmlFile, string XsltFile, string SchemaFile, string templateName, string InvoiceType, string ServiceType, string InvoiceView, string IViewer, string IGenerator) {
            object[] results = this.Invoke("sendInvTempToTVAN", new object[] {
                        username,
                        password,
                        pattern,
                        XmlFile,
                        XsltFile,
                        SchemaFile,
                        templateName,
                        InvoiceType,
                        ServiceType,
                        InvoiceView,
                        IViewer,
                        IGenerator});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendInvTempToTVANAsync(string username, string password, string pattern, string XmlFile, string XsltFile, string SchemaFile, string templateName, string InvoiceType, string ServiceType, string InvoiceView, string IViewer, string IGenerator) {
            this.sendInvTempToTVANAsync(username, password, pattern, XmlFile, XsltFile, SchemaFile, templateName, InvoiceType, ServiceType, InvoiceView, IViewer, IGenerator, null);
        }
        
        /// <remarks/>
        public void sendInvTempToTVANAsync(string username, string password, string pattern, string XmlFile, string XsltFile, string SchemaFile, string templateName, string InvoiceType, string ServiceType, string InvoiceView, string IViewer, string IGenerator, object userState) {
            if ((this.sendInvTempToTVANOperationCompleted == null)) {
                this.sendInvTempToTVANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendInvTempToTVANOperationCompleted);
            }
            this.InvokeAsync("sendInvTempToTVAN", new object[] {
                        username,
                        password,
                        pattern,
                        XmlFile,
                        XsltFile,
                        SchemaFile,
                        templateName,
                        InvoiceType,
                        ServiceType,
                        InvoiceView,
                        IViewer,
                        IGenerator}, this.sendInvTempToTVANOperationCompleted, userState);
        }
        
        private void OnsendInvTempToTVANOperationCompleted(object arg) {
            if ((this.sendInvTempToTVANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendInvTempToTVANCompleted(this, new sendInvTempToTVANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInvWithTokenToolSign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInvWithTokenToolSign(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type) {
            object[] results = this.Invoke("getHashInvWithTokenToolSign", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvWithTokenToolSignAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type) {
            this.getHashInvWithTokenToolSignAsync(Account, ACpass, pattern, serial, no, noNew, publishDate, arisingDate, serialO, noO, type, null);
        }
        
        /// <remarks/>
        public void getHashInvWithTokenToolSignAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type, object userState) {
            if ((this.getHashInvWithTokenToolSignOperationCompleted == null)) {
                this.getHashInvWithTokenToolSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvWithTokenToolSignOperationCompleted);
            }
            this.InvokeAsync("getHashInvWithTokenToolSign", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type}, this.getHashInvWithTokenToolSignOperationCompleted, userState);
        }
        
        private void OngetHashInvWithTokenToolSignOperationCompleted(object arg) {
            if ((this.getHashInvWithTokenToolSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvWithTokenToolSignCompleted(this, new getHashInvWithTokenToolSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInvWithTokenToolSign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInvWithTokenToolSign(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string signValue, string serialCert, string publishDate) {
            object[] results = this.Invoke("publishInvWithTokenToolSign", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        signValue,
                        serialCert,
                        publishDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvWithTokenToolSignAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string signValue, string serialCert, string publishDate) {
            this.publishInvWithTokenToolSignAsync(Account, ACpass, pattern, serial, no, noNew, signValue, serialCert, publishDate, null);
        }
        
        /// <remarks/>
        public void publishInvWithTokenToolSignAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string signValue, string serialCert, string publishDate, object userState) {
            if ((this.publishInvWithTokenToolSignOperationCompleted == null)) {
                this.publishInvWithTokenToolSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvWithTokenToolSignOperationCompleted);
            }
            this.InvokeAsync("publishInvWithTokenToolSign", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        signValue,
                        serialCert,
                        publishDate}, this.publishInvWithTokenToolSignOperationCompleted, userState);
        }
        
        private void OnpublishInvWithTokenToolSignOperationCompleted(object arg) {
            if ((this.publishInvWithTokenToolSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvWithTokenToolSignCompleted(this, new publishInvWithTokenToolSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDataInvHsm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDataInvHsm(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type) {
            object[] results = this.Invoke("getDataInvHsm", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDataInvHsmAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type) {
            this.getDataInvHsmAsync(Account, ACpass, pattern, serial, no, noNew, publishDate, arisingDate, serialO, noO, type, null);
        }
        
        /// <remarks/>
        public void getDataInvHsmAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type, object userState) {
            if ((this.getDataInvHsmOperationCompleted == null)) {
                this.getDataInvHsmOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataInvHsmOperationCompleted);
            }
            this.InvokeAsync("getDataInvHsm", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type}, this.getDataInvHsmOperationCompleted, userState);
        }
        
        private void OngetDataInvHsmOperationCompleted(object arg) {
            if ((this.getDataInvHsmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataInvHsmCompleted(this, new getDataInvHsmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInvWithPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInvWithPattern(string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportInvWithPattern", new object[] {
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvWithPatternAsync(string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportInvWithPatternAsync(xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvWithPatternAsync(string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportInvWithPatternOperationCompleted == null)) {
                this.ImportInvWithPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvWithPatternOperationCompleted);
            }
            this.InvokeAsync("ImportInvWithPattern", new object[] {
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportInvWithPatternOperationCompleted, userState);
        }
        
        private void OnImportInvWithPatternOperationCompleted(object arg) {
            if ((this.ImportInvWithPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvWithPatternCompleted(this, new ImportInvWithPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteInvoiceByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deleteInvoiceByFkey(string lstFkey, string username, string password, string Account, string ACpass) {
            object[] results = this.Invoke("deleteInvoiceByFkey", new object[] {
                        lstFkey,
                        username,
                        password,
                        Account,
                        ACpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteInvoiceByFkeyAsync(string lstFkey, string username, string password, string Account, string ACpass) {
            this.deleteInvoiceByFkeyAsync(lstFkey, username, password, Account, ACpass, null);
        }
        
        /// <remarks/>
        public void deleteInvoiceByFkeyAsync(string lstFkey, string username, string password, string Account, string ACpass, object userState) {
            if ((this.deleteInvoiceByFkeyOperationCompleted == null)) {
                this.deleteInvoiceByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteInvoiceByFkeyOperationCompleted);
            }
            this.InvokeAsync("deleteInvoiceByFkey", new object[] {
                        lstFkey,
                        username,
                        password,
                        Account,
                        ACpass}, this.deleteInvoiceByFkeyOperationCompleted, userState);
        }
        
        private void OndeleteInvoiceByFkeyOperationCompleted(object arg) {
            if ((this.deleteInvoiceByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteInvoiceByFkeyCompleted(this, new deleteInvoiceByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteInvoiceByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deleteInvoiceByID(string lstID, string username, string password, string Account, string ACpass) {
            object[] results = this.Invoke("deleteInvoiceByID", new object[] {
                        lstID,
                        username,
                        password,
                        Account,
                        ACpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteInvoiceByIDAsync(string lstID, string username, string password, string Account, string ACpass) {
            this.deleteInvoiceByIDAsync(lstID, username, password, Account, ACpass, null);
        }
        
        /// <remarks/>
        public void deleteInvoiceByIDAsync(string lstID, string username, string password, string Account, string ACpass, object userState) {
            if ((this.deleteInvoiceByIDOperationCompleted == null)) {
                this.deleteInvoiceByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteInvoiceByIDOperationCompleted);
            }
            this.InvokeAsync("deleteInvoiceByID", new object[] {
                        lstID,
                        username,
                        password,
                        Account,
                        ACpass}, this.deleteInvoiceByIDOperationCompleted, userState);
        }
        
        private void OndeleteInvoiceByIDOperationCompleted(object arg) {
            if ((this.deleteInvoiceByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteInvoiceByIDCompleted(this, new deleteInvoiceByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/callWSTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string callWSTest(string Account, string ACpass, string username, string password) {
            object[] results = this.Invoke("callWSTest", new object[] {
                        Account,
                        ACpass,
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void callWSTestAsync(string Account, string ACpass, string username, string password) {
            this.callWSTestAsync(Account, ACpass, username, password, null);
        }
        
        /// <remarks/>
        public void callWSTestAsync(string Account, string ACpass, string username, string password, object userState) {
            if ((this.callWSTestOperationCompleted == null)) {
                this.callWSTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OncallWSTestOperationCompleted);
            }
            this.InvokeAsync("callWSTest", new object[] {
                        Account,
                        ACpass,
                        username,
                        password}, this.callWSTestOperationCompleted, userState);
        }
        
        private void OncallWSTestOperationCompleted(object arg) {
            if ((this.callWSTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.callWSTestCompleted(this, new callWSTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ImportAndPublishInvCompletedEventHandler(object sender, ImportAndPublishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ImportInvCompletedEventHandler(object sender, ImportInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void publishInvCompletedEventHandler(object sender, publishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateCusCompletedEventHandler(object sender, UpdateCusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void setCusCertCompletedEventHandler(object sender, setCusCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setCusCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setCusCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ImportFromXmlCompletedEventHandler(object sender, ImportFromXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportFromXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportFromXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncInfomationCompletedEventHandler(object sender, syncInfomationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInfomationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInfomationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void resetPasswordCompletedEventHandler(object sender, resetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AppClientSyncInfoSystemCompletedEventHandler(object sender, AppClientSyncInfoSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppClientSyncInfoSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppClientSyncInfoSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getCurrentNoCompletedEventHandler(object sender, getCurrentNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrentNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCurrentNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncClientInvCompletedEventHandler(object sender, syncClientInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncClientInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncClientInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void updateInvoiceCompletedEventHandler(object sender, updateInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncDecisionCompletedEventHandler(object sender, syncDecisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncDecisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncDecisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncPublishCompletedEventHandler(object sender, syncPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPublishInvCompletedEventHandler(object sender, GetPublishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncInvCancelCompletedEventHandler(object sender, syncInvCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDateTimeServerCompletedEventHandler(object sender, getDateTimeServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDateTimeServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDateTimeServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncClientInvoiceCancelCompletedEventHandler(object sender, syncClientInvoiceCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncClientInvoiceCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncClientInvoiceCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ConvertForVerifyCompletedEventHandler(object sender, ConvertForVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertForVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertForVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void sendEmailCompletedEventHandler(object sender, sendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncCertCompletedEventHandler(object sender, syncCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncInvoicev2CompletedEventHandler(object sender, syncInvoicev2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvoicev2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvoicev2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncInvoiceCompletedEventHandler(object sender, syncInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSingleInvoiceCompletedEventHandler(object sender, GetSingleInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void PaymentForVerifyCompletedEventHandler(object sender, PaymentForVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentForVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentForVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCompanyInfoCompletedEventHandler(object sender, GetCompanyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void sendEmailAgainCompletedEventHandler(object sender, sendEmailAgainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEmailAgainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEmailAgainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getHashInvWithTokenCompletedEventHandler(object sender, getHashInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void publishInvWithTokenCompletedEventHandler(object sender, publishInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AdjustReplaceInvWithTokenCompletedEventHandler(object sender, AdjustReplaceInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelInvoiceWithTokenCompletedEventHandler(object sender, CancelInvoiceWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInvoiceWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInvoiceWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void rolBackWithTokenCompletedEventHandler(object sender, rolBackWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rolBackWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rolBackWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void importCertWithTokenCompletedEventHandler(object sender, importCertWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importCertWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importCertWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getStatusInvCompletedEventHandler(object sender, getStatusInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStatusInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatusInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getHashInvCompletedEventHandler(object sender, getHashInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckSignInCompletedEventHandler(object sender, CheckSignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getSerialAndPatternCompletedEventHandler(object sender, getSerialAndPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSerialAndPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSerialAndPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void sendInvTempToTVANCompletedEventHandler(object sender, sendInvTempToTVANCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendInvTempToTVANCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendInvTempToTVANCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getHashInvWithTokenToolSignCompletedEventHandler(object sender, getHashInvWithTokenToolSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvWithTokenToolSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvWithTokenToolSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void publishInvWithTokenToolSignCompletedEventHandler(object sender, publishInvWithTokenToolSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvWithTokenToolSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvWithTokenToolSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void getDataInvHsmCompletedEventHandler(object sender, getDataInvHsmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataInvHsmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataInvHsmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ImportInvWithPatternCompletedEventHandler(object sender, ImportInvWithPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvWithPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvWithPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void deleteInvoiceByFkeyCompletedEventHandler(object sender, deleteInvoiceByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteInvoiceByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteInvoiceByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void deleteInvoiceByIDCompletedEventHandler(object sender, deleteInvoiceByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteInvoiceByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteInvoiceByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void callWSTestCompletedEventHandler(object sender, callWSTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class callWSTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal callWSTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591